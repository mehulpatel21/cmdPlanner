#!/bin/bash
#tt
# Basic scheduling program
working_dir=~/coursenotes
mkdir -p $working_dir/deleted
cd $working_dir
# Parameter pulling
operation="$1"
course="$2"
args="$3"
shift 
shift
message="$*"
shift
addargs="$*"
file=
# Course selection for in/output file
case "$course" in
  "cs" | "221")
    file=CPSC221
    ;;
  "stat" | "302")
    file=STAT302
    ;;
  "ece353" | "353")
    file=EECE353
    ;;
  "ece310" | "310")
    file=EECE310
    ;;
  "cons" | "210")
    file=CONS210
    ;;
  "apsc" | "261")
    file=APSC261
    ;;
  "other" | "misc")
    file=OTHER
    ;;
  *)
    file=
    ;;
esac
# Operation selection
case "$operation" in
  "push" | "-p")
  #  Push - Sends input to text file
  #  Requires input ($message), file ($course => $file) 
    if [ "$file" != "" ] && [ "$message" != "" ] && [ "$course" != "" ]; then
      echo "$message" >> $file
      echo Added \'$message\' to $file
      bash $0 pull $course
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "pull" | "-P")
  #  Pull - Prints contents of a file or of all files (with no params)
  #  Requires (optional) file to read from ($course => $file)
    if [ "$file" == "" ]; then
      bash $0 list
    else
      if [ -f $working_dir/$file ]; then
        echo \> $(basename $file)
        cat $file
      else
        echo File \'$file\' not found
      fi
    fi
    ;;
  "-D" | "del")
  #  Delete - Removes entire contents of input file and replaces with empty one.
  #+ Stores file in deleted/ until next deletion operation.
  #  Requires input file ($course => $file)
    if [ "$file" != "" ]; then
      echo -n "Really delete $file? [Y/n]: "
      read confirm
      if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
        mv $file deleted/
        touch $file
        echo Sent $file\
        to $working_dir/deleted/$file
        bash $0 list
      fi
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "clear" | "-c")
  #  Clear - Removes a single line from file, determined by the first string
  #+ containing input substring
  #  Requires input file ($course => $file) and substring ($message)
    if [ "$message" != "" ] && [ "$file" != "" ]; then
      cat $file |grep "$message" >$working_dir/deleted/lastline &&
      sed -i "/$(grep -m 1 $message $file)/d" $file &&
      echo Deleted \'$(cat $working_dir/deleted/lastline)\'\
      from $file &&
      bash $0 pull $course ||
      echo String \'$message\' not found
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "add" | "-a")
  #  Append - Appends a string onto existing line in text file
  #  Requires input file ($course => $file), substring to search for ($args),
  #+ string to append ($addargs)"
    if [ "$args" != "" ] && [ "$file" != "" ] && [ "$addargs" != "" ]; then
      if [ "$(grep -m 1 $args $file)" != "" ]; then
        sed -i "s/$(grep -m 1 $args $file)/$(grep -m 1 $args $file)$addargs/g" $file
        echo Successfully appended $addargs to\
        $file: $args
        bash $0 pull $course
      else
        echo Could not find \'$args\'
      fi
    else
      echo Invalid format
      bash $0
    fi
    ;;
  "list" | "-l")
  # List - Prints contents of text files in working directory
    find . -maxdepth 1 -type f -exec echo -n "> " \; -exec basename {} \; -exec cat {} \;
    ;;
  "undo" | "-u")
  #  Undo - restores last deleted line to a file
  #  Requires input file ($course ==> $file) 
    if [ "$file" != "" ]; then
      if [ "$(cat $working_dir/deleted/lastline 2>/dev/null)" != "" ]; then
        cat $working_dir/deleted/lastline >> $file
        echo Appended \'$(cat $working_dir/deleted/lastline)\'\
        to $file
        bash $0 pull $course
      else
        echo Last line does not exist
      fi
    else
      bash $0
    fi
    ;;
  "rest" | "-R")
  # Restore - Replaces text file in deleted/, swapping it with existing one in working directory
  # Requires input file ($course => $file)
    if [ "$file" != "" ]; then
      if [ -f $working_dir/deleted/$file ]; then
        mv $working_dir/deleted/$file $working_dir/tmp
        if [ -f $working_dir/$file ]; then
          mv $working_dir/$file $working_dir/deleted/
        fi
        mv $working_dir/tmp $working_dir/$file
        echo Restored $file
        bash $0 pull $course
      else
        echo Could not restore $file: does not exist
      fi
    else
      bash $0
    fi
    ;;
  "rep" | "-r" | "-rl" | "repl")
  #  Replace - Replaces a single word or line in input file with another one
  #  Requires input file ($course => $file), substring to replace ($args),
  #+ replacement string ($addargs)
    if [ "$args" != "" ] && [ "$file" != "" ] && [ "$addargs" != "" ]; then
      if [ "$(grep -m 1 $args $file)" != "" ]; then
        matched_str=$(grep -m 1 $args $file)
        echo $matched_str > $working_dir/deleted/lastline
        if [ "$operation" == "rep" ] || [ "$operation" == "-r" ]; then
          replacement=${matched_str/$args/$addargs}
        else
          replacement=$addargs
        fi
        sed -i s/"$matched_str"/"$replacement"/g $file
        echo Changed $file: \'$matched_str\' \
        to \'$replacement\'
        bash $0 pull $course
      else
        echo Unable to locate \'$args\'
      fi
    else
      bash $0
    fi
    ;;
  "find" | "-f")
  # Find - Seaches files for matching string
  # Requires string to search for ($course)
    if [ "$course" != "" ]; then
      find $working_dir -maxdepth 1 -type f \( -exec grep -q $course {} \; -exec echo -n "> " \; -exec basename {} \; -exec grep $course {} \; \)
    else
      echo Missing argument\(s\)
      bash $0
    fi
    ;;
  "sort" | "-o")
  # Sort - Prints file lines containing dates ranging from todays date +[0,24] in order
  # Requires (optional) number of days to iterate through and search for ($course)
    week_month="[M,T,W,R,F,S,U][j,f,m,a,my,j,jl,ag,s,o,n,d]"
    if [ "$course" == "" ] || [ "$course" -gt "24" ] || [ "$course" -lt "0" ]; then
      length=7
    else
      length=$course
    fi
    days_this_month=$(cal |egrep -v [a-z] |wc -w)
    for i in $(find $working_dir -maxdepth 1 -type f |grep -v tmp); do
      echo "> $(basename $i)" >>tmp
      cat $i >>$working_dir/tmp
    done
    for (( i=`expr $(date +%d) + 0`; i<=`expr $(date +%d) + 0`+$length; i++ )); do
      if [ $i -gt $days_this_month ]; then
        day=$(( $i - $days_this_month ))
      else
        day=$i
      fi
      for file in $(find $working_dir -maxdepth 1 -type f |grep -v tmp |grep -v found); do
        if [ "$(grep $week_month$day$ $file)" != "" ]; then
          echo  "> $(basename $file)"
          grep $week_month$day$ $file
          for j in "$(grep $week_month$day$ $file)"; do
            sed -i /"$j"/d $working_dir/tmp
          done
        fi
      done
    done
    lastline=
    while read line
    do
      if [ "$(echo $line |grep \>)" != "" ] && [ "$(echo $lastline |grep \>)" != "" ]; then
        sed -i "/$lastline/d" tmp 
      fi
      lastline=$line
    done < tmp 
    if [ "$(echo $lastline |grep \>)" != "" ]; then
      sed -i "/$lastline/d" tmp 
    fi
    echo -e "\nUnmatched:"
    cat tmp
    rm tmp
    ;;
  "help" | "-h")
  # Help - Prints info on operation usage
    echo "Usage: cnotes [-acDfhopPrRu] [-rl] course args addargs"
    echo "options:"
    echo " -p, push  - append args to course"
    echo " -P, pull  - read from course or print all with no course"
    echo " -l, list  - print all course files"
    echo " -c, clear - delete first line containing args from course, temporarily storing it in working_dir/deleted/lastline"
    echo " -a, add   - append addargs to first line containing args in course"
    echo " -D, del   - delete course file, temporarily storing it in working_dir/deleted/"    
    echo " -u, undo  - append most recently cleared line to course"
    echo " -R, rest  - swap deleted course file with one in working_dir/deleted"
    echo " -rl, repl - replace first line containing args with addargs"
    echo " -r, rep   - replace first line occurence of args with addargs"
    echo " -f, find  - print file lines containing args"
    echo " -o, sort  - print file lines in order containing todays date + args (default 7)"
    echo " -h, help  - show this menu"
    ;;
  * | "")
  # Default - Prints minimal usage information
    echo "Usage: cnotes [-acDfhpPrRu] [-rl] course args addargs"
    echo "Type cnotes help or cnotes -h for more info"
    ;;
esac
